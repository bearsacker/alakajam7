include window
include title

global const int MAX_LIFES = 5

global int score = 0
global int lifes = MAX_LIFES

global List markers = List:new()
global Kraken kraken = Kraken:new()
global List boats = List:new()
global List rocks = List:new()
List:add(rocks, Rock:new(ROCK_SPRITE_1, 0, 3, 0))
List:add(rocks, Rock:new(ROCK_SPRITE_2, 3, 4, 2))
List:add(rocks, Rock:new(ROCK_SPRITE_1, 10, 4, 1))
List:add(rocks, Rock:new(ROCK_SPRITE_2, 13, 6, 0))
List:add(rocks, Rock:new(ROCK_SPRITE_3, 14, 5, 3))
List:add(rocks, Rock:new(ROCK_SPRITE_1, 7, 7, 2))
List:add(rocks, Rock:new(ROCK_SPRITE_2, 8, 7, 2))
List:add(rocks, Rock:new(ROCK_SPRITE_3, 6, 7, 1))
List:add(rocks, Rock:new(ROCK_SPRITE_3, 9, 7, 2))

global int lastDisplay = time
global bool direction = false

function resetGame() {
    List:clear(markers)
    List:clear(boats)
    kraken = Kraken:new()
    score = 0
    lifes = MAX_LIFES
}

function drawScene() {
    lastDisplay = time

    Vector mouse = Vector:new(Input:getMouseX(), Input:getMouseY())
    if mouse.y > 0 && mouse.y < (ZOOM * 64) {
        mouse.y = (ZOOM * 64)
    }

    Graphics:clear()

    Sea:draw()

    int i = 0
    while i < boats.size {
        Boat boat = List:get(boats, i)
        Graphics:drawSprite(boatSprite[boat.frame], ZOOM * boat.position.x, ZOOM * boat.position.y, 0, ZOOM)
        
        int boatState = Boat:update(boats.elements[i], mouse)

        if boatState == BOAT_STATE_SAFE {
            List:remove(boats, i)
            List:add(markers, Marker:new(MARKER_TYPE_GAIN, boat.position.x, boat.position.y - 16))
            snd_action play MARKER_GAIN_SOUND null

            score++
        } else if boatState == BOAT_STATE_DESTROY {
            List:remove(boats, i)
            List:add(markers, Marker:new(MARKER_TYPE_LOSE, boat.position.x, boat.position.y - 16))
            snd_action play MARKER_LOSE_SOUND null

            lifes--
            if lifes < 0 {
                lifes = 0
            }
        } else {
            i++
        }
    }

    int i = 0
    while i < clouds.size {
        Cloud:draw(clouds.elements[i])
        i++
    }

    int i = 0
    while i < rocks.size {
        Rock:draw(rocks.elements[i])
        i++
    }

    Kraken:draw(kraken)
    Kraken:update(kraken, mouse)

    if mouse.x > 0 && mouse.y > 0 {
        if direction {
            Graphics:setColor(LIGHT_ON)
        } else {
            Graphics:setColor(LIGHT_OFF)
        }

        Graphics:drawLine(ZOOM * 128, ZOOM * 144, mouse.x - 4, mouse.y, 7)
        Graphics:drawLine(ZOOM * 128, ZOOM * 144, mouse.x + 4, mouse.y, 7)
    }

    Graphics:drawSprite(CLIFF_SPRITE, ZOOM * 104, ZOOM * 160, 0, ZOOM)
    Graphics:drawSprite(LIGHTHOUSE_SPRITE, ZOOM * 112, ZOOM * 126, 0, ZOOM)

    int i = 0
    while i < markers.size {
        Marker:draw(markers.elements[i])

        if Marker:isDead(markers.elements[i]) {
            List:remove(markers, i)
        } else {
            i++
        }
    }

    Graphics:drawText("LIFES " + lifes, ZOOM * 2, ZOOM * 2, ATASCII, ZOOM / 2)
    Graphics:drawText("SCORE " + score, ZOOM * (WIDTH - ("SCORE " + score).length * 8 - 2), ZOOM * 2, ATASCII, ZOOM / 2)

    Graphics:flush()
}

int waitBeforeBoat = 0
int waitBeforeKraken = 0

while true {
    if time - lastDisplay > 100 {
        drawScene()

        Input:flush()
        direction = Input:isButtonPressed(1)

        if boats.size < MAX_BOATS && Random:rand(20) == 1 && waitBeforeBoat <= 0 {
            List:add(boats, Boat:new())
            waitBeforeBoat = 10
        }
        waitBeforeBoat -= 1

        if kraken.state == KRAKEN_STATE_IMMERSED && waitBeforeKraken <= 0 && score >= 5 && (score == 5 || Random:rand(50) == 1) {
            Kraken:incoming(kraken)
            waitBeforeKraken = 60
        }

        if kraken.state == KRAKEN_STATE_IMMERSED {
            waitBeforeKraken--
        }

        if lifes == 0 {
            include gameover
            resetGame()
        }
    }

    sleep 10
}
