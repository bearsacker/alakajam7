type Queue [size, elements]

global const int QUEUE_INIT_SIZE = 2

function Queue:new() {
	Queue queue = null
	queue.size = 0
	
	array elements = QUEUE_INIT_SIZE
	queue.elements = elements
	
	return queue
}

function Queue:clear(@queue) {
	queue.size = 0

	array elements = QUEUE_INIT_SIZE
	queue.elements = elements
}

function Queue:swap(@first, @second) {
	Queue temp = first
	first = second
	second = temp
}

function Queue:push(@queue, element) {
	if queue.size == queue.elements.length {
		array newElements = queue.size * QUEUE_INIT_SIZE
		
		int i = 0
		while i < queue.size {
			newElements[i] = queue.elements[i]
			i++
		}
		
		queue.elements = newElements
	}

	queue.elements[queue.size] = element
	queue.size++
}

function Queue:pop(@queue) {
	if queue.size == 0 {
		return null
	}
	
	Queue temp = queue
	
	int i = 0
	while i < queue.size - 1 {
		queue.elements[i] = queue.elements[i + 1]
		i++
	}
	
	queue.size--
	queue.elements[queue.size] = null

	
	return temp.elements[0]
}

function Queue:peek(queue) {
	if queue.size == 0 {
		return null
	}

	return queue.elements[0]
}

function Queue:last(queue) {
	if queue.size == 0 {
		return null
	}

	return queue.elements[queue.size - 1]
}