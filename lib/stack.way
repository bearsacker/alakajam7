type Stack [size, elements]

global const int STACK_INIT_SIZE = 2

function Stack:new() {
	Stack stack = null
	stack.size = 0
	
	array elements = STACK_INIT_SIZE
	stack.elements = elements
	
	return stack
}

function Stack:clear(@stack) {
	stack.size = 0

	array elements = STACK_INIT_SIZE
	stack.elements = elements
}

function Stack:swap(@first, @second) {
	Stack temp = first
	first = second
	second = temp
}

function Stack:push(@stack, element) {
	if stack.size == stack.elements.length {
		array newElements = stack.size * STACK_INIT_SIZE
		
		int i = 0
		while i < stack.size {
			newElements[i] = stack.elements[i]
			i++
		}
		
		stack.elements = newElements
	}

	stack.elements[stack.size] = element
	stack.size++
}

function Stack:pop(@stack) {
	if stack.size == 0 {
		return null
	}
	
	stack.size--
	Stack temp = stack
	stack.elements[stack.size] = null
	
	return temp.elements[temp.size]
}

function Stack:peek(stack) {
	if stack.size == 0 {
		return null
	}

	return stack.elements[stack.size - 1]
}