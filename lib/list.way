type List [size, elements]

global const int LIST_INIT_SIZE = 2

function List:new() {
	List list = null
	list.size = 0
	
	array elements = LIST_INIT_SIZE
	list.elements = elements
	
	return list
}

function List:clear(@list) {
	list.size = 0

	array elements = LIST_INIT_SIZE
	list.elements = elements
}

function List:swap(@first, @second) {
	List temp = first
	first = second
	second = temp
}

function List:add(@list, element) {
	if list.size == list.elements.length {
		array newElements = list.size * LIST_INIT_SIZE
		
		int i = 0
		while i < list.size {
			newElements[i] = list.elements[i]
			i++
		}
		
		list.elements = newElements
	}

	list.elements[list.size] = element
	list.size++
}

function List:remove(@list, index) {
	if (index < 0) || (index >= list.size) {
		break
	}
	
	int i = index
	while i < list.size - 1 {
		list.elements[i] = list.elements[i + 1]
		i++
	}
	
	list.size--
	list.elements[list.size] = null
}

function List:get(list, index) {
	if (index < 0) || (index >= list.size) {
		return null
	}

	return list.elements[index]
}

function List:set(@list, index, element) {
	if (index < 0) || (index >= list.size) {
		return null
	}

	list.elements[index] = element
}

function List:first(list) {
	return list.elements[0]
}

function List:last(list) {
	if list.size == 0 {
		return list.elements[0]
	}

	return list.elements[list.size - 1]
}